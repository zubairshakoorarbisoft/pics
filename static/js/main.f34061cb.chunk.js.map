{"version":3,"sources":["api/unsplash.js","components/SearchBar.js","components/ImageCard.js","components/ImagesList.js","components/Spinner.js","components/app.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","state","term","event","preventDefault","this","props","handleSearch","className","onSubmit","onSubmitForm","style","textAlign","placeholder","onChange","setState","target","value","React","Component","ImageCard","spans","setImageSpans","height","imgRefs","current","clientHeight","Math","ceil","createRef","addEventListener","url","description","gridRowEnd","ref","src","alt","ImagesList","images","length","map","image","key","id","urls","regular","Spinner","message","defaultProps","App","isSearching","unsplash","get","params","query","response","data","results","marginTop","onSearchSubmit","renderContent","ReactDOM","render","document","querySelector"],"mappings":"4PAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,2BACTC,QAAS,CACPC,cACE,gFCkCSC,E,2MArCbC,MAAQ,CAAEC,KAAM,I,4EAcHC,GACXA,EAAMC,iBACNC,KAAKC,MAAMC,aAAaF,KAAKJ,MAAMC,Q,+BAE3B,IAAD,OACP,OACE,yBAAKM,UAAU,cACb,0BAAMA,UAAU,UAAUC,SAAU,SAACN,GAAD,OAAW,EAAKO,aAAaP,KAC/D,yBAAKK,UAAU,SACb,wBAAIG,MAAO,CAACC,UAAW,WAAvB,wBACA,2BACEC,YAAY,4CACZC,SAAU,SAAAX,GACR,EAAKY,SAAS,CAAEb,KAAMC,EAAMa,OAAOC,SAErCA,MAAOZ,KAAKJ,MAAMC,c,GA9BRgB,IAAMC,WC0BfC,E,YAzBX,aAAc,IAAD,8BACT,+CAGJnB,MAAQ,CAACoB,MAAO,GAJH,EASbC,cAAgB,WACZ,IAAMC,EAAS,EAAKC,QAAQC,QAAQC,aAC9BL,EAAQM,KAAKC,KAAKL,EAAS,IACjC,EAAKR,SAAS,CAACM,WAVf,EAAKG,QAAUN,IAAMW,YAFZ,E,iFAMTxB,KAAKmB,QAAQC,QAAQK,iBAAiB,OAAQzB,KAAKiB,iB,+BAS/C,IAAD,EACsBjB,KAAKC,MAA1ByB,EADD,EACCA,IAAKC,EADN,EACMA,YACb,OACE,yBAAKrB,MAAO,CAACsB,WAAW,QAAD,OAAU5B,KAAKJ,MAAMoB,SAC1C,yBAAKa,IAAK7B,KAAKmB,QAASW,IAAKJ,EAAKK,IAAKJ,S,GApBvBd,IAAMC,WCkBfkB,EAjBI,SAAA/B,GACjB,OAAIA,EAAMgC,OAAOC,OAAS,EAEtB,6BACE,yEAA2CjC,EAAMJ,KAAjD,OAICI,EAAMgC,OAAOE,KAAI,SAAAC,GAAK,OAC3B,kBAAC,EAAD,CACEC,IAAKD,EAAME,GACXX,YAAaS,EAAMT,YACnBD,IAAKU,EAAMG,KAAKC,cCZhBC,EAAU,SAAAxC,GACd,OACE,yBAAKE,UAAU,oBACb,yBAAKA,UAAU,sBAAsBF,EAAMyC,WAMjDD,EAAQE,aAAe,CACrBD,QAAS,6BAGID,QCuCAG,G,iNA3CbhD,MAAQ,CAAEqC,OAAQ,GAAIY,aAAa,EAAOhD,KAAM,I,8EAC3BA,G,+EAYnBG,KAAKU,SAAS,CAAEmC,aAAa,EAAMhD,S,mBAEZiD,EAASC,IAAI,iBAAkB,CACpDC,OAAQ,CAAEC,MAAOpD,M,OADbqD,E,OAGNlD,KAAKU,SAAS,CAAEuB,OAAQiB,EAASC,KAAKC,QAASP,aAAa,I,uFAI5D,OAAI7C,KAAKJ,MAAMiD,YACN,kBAAC,EAAD,CAASH,QAAO,kBAAa1C,KAAKJ,MAAMC,KAAxB,kBAED,KAApBG,KAAKJ,MAAMC,KAEX,yBAAKM,UAAU,eACb,kBAAC,EAAD,CAAY8B,OAAQjC,KAAKJ,MAAMqC,OAAQpC,KAAMG,KAAKJ,MAAMC,aAH9D,I,+BAQQ,IAAD,OACP,OACE,yBAAKM,UAAU,eAAeG,MAAO,CAAE+C,UAAW,SAChD,kBAAC,EAAD,CAAWnD,aAAc,SAAAJ,GAAK,OAAI,EAAKwD,eAAexD,MACrDE,KAAKuD,qB,GA1CI1C,IAAMC,YCFxB0C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,Y","file":"static/js/main.f34061cb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.unsplash.com\",\r\n  headers: {\r\n    Authorization:\r\n      \"Client-ID 383c80b11dfa5f6c5c86433762751fa44150320454937fa85a071a5ae745c977\"\r\n  }\r\n});\r\n","import React from \"react\";\r\n\r\nclass SearchBar extends React.Component {\r\n  state = { term: \"\"}\r\n  // One way to resolve Context issue\r\n  //   constructor(){\r\n  //       super();\r\n  //       this.onSubmitForm = this.onSubmitForm.bind(this);\r\n  //   }\r\n\r\n  // Second way to resolve context issue make Error fucntion iside a class\r\n//   onSubmitForm = event => {\r\n//     event.preventDefault();\r\n//     console.log(this.state.term);\r\n//   };\r\n\r\n  // Third way to resolve context issuecall simple function as Arrow function \r\n  onSubmitForm(event){\r\n    event.preventDefault();\r\n    this.props.handleSearch(this.state.term);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"ui segment\">\r\n        <form className=\"ui form\" onSubmit={(event) => this.onSubmitForm(event)}>\r\n          <div className=\"field\">\r\n            <h3 style={{textAlign: 'center'}}>Images Search Engine</h3>\r\n            <input\r\n              placeholder=\"Type image term and press enter e.g. cars\"\r\n              onChange={event => {\r\n                this.setState({ term: event.target.value });\r\n              }}\r\n              value={this.state.term}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nclass ImageCard extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.imgRefs = React.createRef();\r\n    }\r\n    state = {spans: 0}\r\n    componentDidMount(){\r\n        this.imgRefs.current.addEventListener('load', this.setImageSpans);\r\n    }\r\n\r\n    setImageSpans = () => {\r\n        const height = this.imgRefs.current.clientHeight;\r\n        const spans = Math.ceil(height / 10);\r\n        this.setState({spans})\r\n\r\n    };\r\n  render() {\r\n    const { url, description } = this.props;\r\n    return (\r\n      <div style={{gridRowEnd: `span ${this.state.spans}`}}>\r\n        <img ref={this.imgRefs} src={url} alt={description} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport ImageCard from \"./ImageCard\";\r\n\r\nconst ImagesList = props => {\r\n  if (props.images.length < 1) {\r\n    return (\r\n      <div>\r\n        <strong>{`No results found for the term \"${props.term}\"`}</strong>\r\n      </div>\r\n    );\r\n  }\r\n  return props.images.map(image => (\r\n    <ImageCard\r\n      key={image.id}\r\n      description={image.description}\r\n      url={image.urls.regular}\r\n    />\r\n  ));\r\n};\r\n\r\nexport default ImagesList;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//  These props values woul be taken if no prop been provided\r\nSpinner.defaultProps = {\r\n  message: \"Loading image results ...\"\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport unsplash from \"../api/unsplash\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport ImagesList from \"../components/ImagesList\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport \"../components/ImagesList.css\";\r\n\r\nclass App extends React.Component {\r\n  // constructor(){\r\n  //     super();\r\n  //     // this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n  // }\r\n  state = { images: [], isSearching: false, term: \"\" };\r\n  async onSearchSubmit(term) {\r\n    // One way to get the response asyncronously\r\n    // axios.get('https://api.unsplash.com/search/photos',{\r\n    //     params: { query: term},\r\n    //     headers: {\r\n    //         Authorization: 'Client-ID 383c80b11dfa5f6c5c86433762751fa44150320454937fa85a071a5ae745c977'\r\n    //     }\r\n    // }).\r\n    // then(response => {\r\n    //     console.log(response.data.results)\r\n    // });\r\n\r\n    this.setState({ isSearching: true, term });\r\n    // Second Way to get the response asyncronously\r\n    const response = await unsplash.get(\"/search/photos\", {\r\n      params: { query: term }\r\n    });\r\n    this.setState({ images: response.data.results, isSearching: false });\r\n    debugger;\r\n  }\r\n  renderContent() {\r\n    if (this.state.isSearching) {\r\n      return <Spinner message={`Loading ${this.state.term} results ...`} />;\r\n    }\r\n    if (this.state.term !== \"\") {\r\n      return (\r\n        <div className=\"images-list\">\r\n          <ImagesList images={this.state.images} term={this.state.term} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"ui container\" style={{ marginTop: \"10px\" }}>\r\n        <SearchBar handleSearch={event => this.onSearchSubmit(event)} />\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './components/app'\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}